#include <bits/stdc++.h>
using namespace std;

struct node{
 int data;
 node* next;

   node(int data){
       this -> data = data;
       next = NULL;
   }
};

node* createLL(node* head,int n){
int data;
cin >> data;
   if(head == NULL) head = new node(data);
--n;
node* tail = head;

   while(n-- > 0){
       cin >> data;
       node* temp = new node(data);
       tail -> next = temp;
       tail = temp;
   }
 return head;
}

node* findAtposition(node* head,int n){
   while(--n > 0) head = head -> next;
   return head;
}

node* foldedLL(node* head,int n){
 node* newhead = NULL;
 node* start = head;
 node* last = findAtposition(head,n);
 node* tail = NULL;
 int cnt =  0;
    while(head != last){
     // even
      if(cnt % 2 == 0){
         if(newhead == NULL){
            node* temp = head;
            head = temp -> next;
            newhead = temp;
            tail = newhead;
            //start = start->next;
         }else{
            tail -> next = head;
            head = head -> next;
            tail = tail -> next;
            //start = start -> next;
         }

      }else{
      // odd
           node* prev = findAtposition(head,n-2);
           tail -> next = last;
           prev -> next = NULL;
           last = prev;
           tail = tail -> next;
           n -= 2;
      }

      cnt++;
    }

 if(cnt % 2 == 0) tail -> next = head;

 return newhead;
}

void print(node* head){
    while(head != NULL){
        cout << head -> data << " ";
        head = head -> next;
    }
}

int main(){

int t;
cin >> t;

    while(t--){
        node* head = NULL;
        int n;
        cin >> n;
        head = createLL(head,n);
        head = foldedLL(head,n);
        //cout << (findAtposition(head,4)) -> data;
        print(head);
    }

 return 0;
}
